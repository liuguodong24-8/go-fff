// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package Cup

import (
	"math/big"
	"strings"

	ethereum "github.com/fff-chain/go-fff"
	"github.com/fff-chain/go-fff/accounts/abi"
	"github.com/fff-chain/go-fff/accounts/abi/bind"
	"github.com/fff-chain/go-fff/common"
	"github.com/fff-chain/go-fff/core/types"
	"github.com/fff-chain/go-fff/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ModelBetInfo is an auto generated low-level Go binding around an user-defined struct.
type ModelBetInfo struct {
	Addr   common.Address
	Amount *big.Int
	T      uint8
}

// ModelGameInfo is an auto generated low-level Go binding around an user-defined struct.
type ModelGameInfo struct {
	Id             *big.Int
	ATeam          string
	BTeam          string
	ATeamLogo      string
	BTeamLogo      string
	Label          string
	BetStartTime   uint64
	BetEndTime     uint64
	GameStartTime  uint64
	TotalBetAmount *big.Int
	WinBetAmount   *big.Int
	FailBetAmount  *big.Int
	DrawBetAmount  *big.Int
	WinOdds        *big.Int
	FailOdds       *big.Int
	DrawOdds       *big.Int
	IsEnd          bool
	Rst            uint8
	AScore         *big.Int
	BScore         *big.Int
	SystemDividend *big.Int
	BetInfos       []ModelBetInfo
	WithDrawLogs   []ModelWithDrawLog
	IsHav          bool
}

// ModelWithDrawLog is an auto generated low-level Go binding around an user-defined struct.
type ModelWithDrawLog struct {
	Addr   common.Address
	Amount *big.Int
}

// CupABI is the input ABI used to generate the binding from.
const CupABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token_addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_platform_addr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_BET_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SYSTEM_DIVIDEND_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"a_score\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b_score\",\"type\":\"uint256\"}],\"name\":\"announce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"t\",\"type\":\"uint8\"}],\"name\":\"bet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"a_team\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"b_team\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"a_team_logo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"b_team_logo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"bet_start_time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"bet_end_time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"game_start_time\",\"type\":\"uint64\"}],\"name\":\"createGame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getDivideAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getGame\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"a_team\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"b_team\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"a_team_logo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"b_team_logo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"bet_start_time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"bet_end_time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"game_start_time\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"total_bet_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"win_bet_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fail_bet_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"draw_bet_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"win_odds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fail_odds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"draw_odds\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"is_end\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"rst\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"a_score\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b_score\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"system_dividend\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"t\",\"type\":\"uint8\"}],\"internalType\":\"structModel.BetInfo[]\",\"name\":\"bet_infos\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"structModel.WithDrawLog[]\",\"name\":\"with_draw_logs\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"is_hav\",\"type\":\"bool\"}],\"internalType\":\"structModel.GameInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"t\",\"type\":\"uint8\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"platformWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMinBetAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setSystemDividendRatio\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"t\",\"type\":\"uint8\"}],\"name\":\"shareRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"t\",\"type\":\"uint8\"}],\"name\":\"totalAmountByType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"a_team\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"b_team\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"a_team_logo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"b_team_logo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"bet_start_time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"bet_end_time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"game_start_time\",\"type\":\"uint64\"}],\"name\":\"updateGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// CupBin is the compiled bytecode used for deploying new contracts.
var CupBin = ""

// DeployCup deploys a new Ethereum contract, binding an instance of Cup to it.
func DeployCup(auth *bind.TransactOpts, backend bind.ContractBackend, _token_addr common.Address, _platform_addr common.Address) (common.Address, *types.Transaction, *Cup, error) {
	parsed, err := abi.JSON(strings.NewReader(CupABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(CupBin), backend, _token_addr, _platform_addr)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Cup{CupCaller: CupCaller{contract: contract}, CupTransactor: CupTransactor{contract: contract}, CupFilterer: CupFilterer{contract: contract}}, nil
}

// Cup is an auto generated Go binding around an Ethereum contract.
type Cup struct {
	CupCaller     // Read-only binding to the contract
	CupTransactor // Write-only binding to the contract
	CupFilterer   // Log filterer for contract events
}

// CupCaller is an auto generated read-only Go binding around an Ethereum contract.
type CupCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CupTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CupTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CupFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CupFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CupSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CupSession struct {
	Contract     *Cup              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CupCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CupCallerSession struct {
	Contract *CupCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// CupTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CupTransactorSession struct {
	Contract     *CupTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CupRaw is an auto generated low-level Go binding around an Ethereum contract.
type CupRaw struct {
	Contract *Cup // Generic contract binding to access the raw methods on
}

// CupCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CupCallerRaw struct {
	Contract *CupCaller // Generic read-only contract binding to access the raw methods on
}

// CupTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CupTransactorRaw struct {
	Contract *CupTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCup creates a new instance of Cup, bound to a specific deployed contract.
func NewCup(address common.Address, backend bind.ContractBackend) (*Cup, error) {
	contract, err := bindCup(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Cup{CupCaller: CupCaller{contract: contract}, CupTransactor: CupTransactor{contract: contract}, CupFilterer: CupFilterer{contract: contract}}, nil
}

// NewCupCaller creates a new read-only instance of Cup, bound to a specific deployed contract.
func NewCupCaller(address common.Address, caller bind.ContractCaller) (*CupCaller, error) {
	contract, err := bindCup(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CupCaller{contract: contract}, nil
}

// NewCupTransactor creates a new write-only instance of Cup, bound to a specific deployed contract.
func NewCupTransactor(address common.Address, transactor bind.ContractTransactor) (*CupTransactor, error) {
	contract, err := bindCup(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CupTransactor{contract: contract}, nil
}

// NewCupFilterer creates a new log filterer instance of Cup, bound to a specific deployed contract.
func NewCupFilterer(address common.Address, filterer bind.ContractFilterer) (*CupFilterer, error) {
	contract, err := bindCup(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CupFilterer{contract: contract}, nil
}

// bindCup binds a generic wrapper to an already deployed contract.
func bindCup(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CupABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Cup *CupRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Cup.Contract.CupCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Cup *CupRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Cup.Contract.CupTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Cup *CupRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Cup.Contract.CupTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Cup *CupCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Cup.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Cup *CupTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Cup.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Cup *CupTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Cup.Contract.contract.Transact(opts, method, params...)
}

// MINBETAMOUNT is a free data retrieval call binding the contract method 0x6475e3d3.
//
// Solidity: function MIN_BET_AMOUNT() view returns(uint256)
func (_Cup *CupCaller) MINBETAMOUNT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Cup.contract.Call(opts, &out, "MIN_BET_AMOUNT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MINBETAMOUNT is a free data retrieval call binding the contract method 0x6475e3d3.
//
// Solidity: function MIN_BET_AMOUNT() view returns(uint256)
func (_Cup *CupSession) MINBETAMOUNT() (*big.Int, error) {
	return _Cup.Contract.MINBETAMOUNT(&_Cup.CallOpts)
}

// MINBETAMOUNT is a free data retrieval call binding the contract method 0x6475e3d3.
//
// Solidity: function MIN_BET_AMOUNT() view returns(uint256)
func (_Cup *CupCallerSession) MINBETAMOUNT() (*big.Int, error) {
	return _Cup.Contract.MINBETAMOUNT(&_Cup.CallOpts)
}

// SYSTEMDIVIDENDRATIO is a free data retrieval call binding the contract method 0x56979c44.
//
// Solidity: function SYSTEM_DIVIDEND_RATIO() view returns(uint256)
func (_Cup *CupCaller) SYSTEMDIVIDENDRATIO(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Cup.contract.Call(opts, &out, "SYSTEM_DIVIDEND_RATIO")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SYSTEMDIVIDENDRATIO is a free data retrieval call binding the contract method 0x56979c44.
//
// Solidity: function SYSTEM_DIVIDEND_RATIO() view returns(uint256)
func (_Cup *CupSession) SYSTEMDIVIDENDRATIO() (*big.Int, error) {
	return _Cup.Contract.SYSTEMDIVIDENDRATIO(&_Cup.CallOpts)
}

// SYSTEMDIVIDENDRATIO is a free data retrieval call binding the contract method 0x56979c44.
//
// Solidity: function SYSTEM_DIVIDEND_RATIO() view returns(uint256)
func (_Cup *CupCallerSession) SYSTEMDIVIDENDRATIO() (*big.Int, error) {
	return _Cup.Contract.SYSTEMDIVIDENDRATIO(&_Cup.CallOpts)
}

// GetDivideAmount is a free data retrieval call binding the contract method 0x592c949c.
//
// Solidity: function getDivideAmount(uint256 gameId) view returns(uint256)
func (_Cup *CupCaller) GetDivideAmount(opts *bind.CallOpts, gameId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Cup.contract.Call(opts, &out, "getDivideAmount", gameId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDivideAmount is a free data retrieval call binding the contract method 0x592c949c.
//
// Solidity: function getDivideAmount(uint256 gameId) view returns(uint256)
func (_Cup *CupSession) GetDivideAmount(gameId *big.Int) (*big.Int, error) {
	return _Cup.Contract.GetDivideAmount(&_Cup.CallOpts, gameId)
}

// GetDivideAmount is a free data retrieval call binding the contract method 0x592c949c.
//
// Solidity: function getDivideAmount(uint256 gameId) view returns(uint256)
func (_Cup *CupCallerSession) GetDivideAmount(gameId *big.Int) (*big.Int, error) {
	return _Cup.Contract.GetDivideAmount(&_Cup.CallOpts, gameId)
}

// GetGame is a free data retrieval call binding the contract method 0xa2f77bcc.
//
// Solidity: function getGame(uint256 gameId) view returns((uint256,string,string,string,string,string,uint64,uint64,uint64,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,uint8,uint256,uint256,uint256,(address,uint256,uint8)[],(address,uint256)[],bool))
func (_Cup *CupCaller) GetGame(opts *bind.CallOpts, gameId *big.Int) (ModelGameInfo, error) {
	var out []interface{}
	err := _Cup.contract.Call(opts, &out, "getGame", gameId)

	if err != nil {
		return *new(ModelGameInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(ModelGameInfo)).(*ModelGameInfo)

	return out0, err

}

// GetGame is a free data retrieval call binding the contract method 0xa2f77bcc.
//
// Solidity: function getGame(uint256 gameId) view returns((uint256,string,string,string,string,string,uint64,uint64,uint64,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,uint8,uint256,uint256,uint256,(address,uint256,uint8)[],(address,uint256)[],bool))
func (_Cup *CupSession) GetGame(gameId *big.Int) (ModelGameInfo, error) {
	return _Cup.Contract.GetGame(&_Cup.CallOpts, gameId)
}

// GetGame is a free data retrieval call binding the contract method 0xa2f77bcc.
//
// Solidity: function getGame(uint256 gameId) view returns((uint256,string,string,string,string,string,uint64,uint64,uint64,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,uint8,uint256,uint256,uint256,(address,uint256,uint8)[],(address,uint256)[],bool))
func (_Cup *CupCallerSession) GetGame(gameId *big.Int) (ModelGameInfo, error) {
	return _Cup.Contract.GetGame(&_Cup.CallOpts, gameId)
}

// Harvest is a free data retrieval call binding the contract method 0x60bf4682.
//
// Solidity: function harvest(uint256 gameId, uint8 t) view returns(uint256)
func (_Cup *CupCaller) Harvest(opts *bind.CallOpts, gameId *big.Int, t uint8) (*big.Int, error) {
	var out []interface{}
	err := _Cup.contract.Call(opts, &out, "harvest", gameId, t)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Harvest is a free data retrieval call binding the contract method 0x60bf4682.
//
// Solidity: function harvest(uint256 gameId, uint8 t) view returns(uint256)
func (_Cup *CupSession) Harvest(gameId *big.Int, t uint8) (*big.Int, error) {
	return _Cup.Contract.Harvest(&_Cup.CallOpts, gameId, t)
}

// Harvest is a free data retrieval call binding the contract method 0x60bf4682.
//
// Solidity: function harvest(uint256 gameId, uint8 t) view returns(uint256)
func (_Cup *CupCallerSession) Harvest(gameId *big.Int, t uint8) (*big.Int, error) {
	return _Cup.Contract.Harvest(&_Cup.CallOpts, gameId, t)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Cup *CupCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Cup.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Cup *CupSession) Owner() (common.Address, error) {
	return _Cup.Contract.Owner(&_Cup.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Cup *CupCallerSession) Owner() (common.Address, error) {
	return _Cup.Contract.Owner(&_Cup.CallOpts)
}

// ShareRatio is a free data retrieval call binding the contract method 0x439d904e.
//
// Solidity: function shareRatio(uint256 gameId, uint8 t) view returns(uint256)
func (_Cup *CupCaller) ShareRatio(opts *bind.CallOpts, gameId *big.Int, t uint8) (*big.Int, error) {
	var out []interface{}
	err := _Cup.contract.Call(opts, &out, "shareRatio", gameId, t)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ShareRatio is a free data retrieval call binding the contract method 0x439d904e.
//
// Solidity: function shareRatio(uint256 gameId, uint8 t) view returns(uint256)
func (_Cup *CupSession) ShareRatio(gameId *big.Int, t uint8) (*big.Int, error) {
	return _Cup.Contract.ShareRatio(&_Cup.CallOpts, gameId, t)
}

// ShareRatio is a free data retrieval call binding the contract method 0x439d904e.
//
// Solidity: function shareRatio(uint256 gameId, uint8 t) view returns(uint256)
func (_Cup *CupCallerSession) ShareRatio(gameId *big.Int, t uint8) (*big.Int, error) {
	return _Cup.Contract.ShareRatio(&_Cup.CallOpts, gameId, t)
}

// TotalAmountByType is a free data retrieval call binding the contract method 0x00ae3dd9.
//
// Solidity: function totalAmountByType(uint256 gameId, uint8 t) view returns(uint256)
func (_Cup *CupCaller) TotalAmountByType(opts *bind.CallOpts, gameId *big.Int, t uint8) (*big.Int, error) {
	var out []interface{}
	err := _Cup.contract.Call(opts, &out, "totalAmountByType", gameId, t)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalAmountByType is a free data retrieval call binding the contract method 0x00ae3dd9.
//
// Solidity: function totalAmountByType(uint256 gameId, uint8 t) view returns(uint256)
func (_Cup *CupSession) TotalAmountByType(gameId *big.Int, t uint8) (*big.Int, error) {
	return _Cup.Contract.TotalAmountByType(&_Cup.CallOpts, gameId, t)
}

// TotalAmountByType is a free data retrieval call binding the contract method 0x00ae3dd9.
//
// Solidity: function totalAmountByType(uint256 gameId, uint8 t) view returns(uint256)
func (_Cup *CupCallerSession) TotalAmountByType(gameId *big.Int, t uint8) (*big.Int, error) {
	return _Cup.Contract.TotalAmountByType(&_Cup.CallOpts, gameId, t)
}

// Announce is a paid mutator transaction binding the contract method 0x7ea1a871.
//
// Solidity: function announce(uint256 gameId, uint256 a_score, uint256 b_score) returns()
func (_Cup *CupTransactor) Announce(opts *bind.TransactOpts, gameId *big.Int, a_score *big.Int, b_score *big.Int) (*types.Transaction, error) {
	return _Cup.contract.Transact(opts, "announce", gameId, a_score, b_score)
}

// Announce is a paid mutator transaction binding the contract method 0x7ea1a871.
//
// Solidity: function announce(uint256 gameId, uint256 a_score, uint256 b_score) returns()
func (_Cup *CupSession) Announce(gameId *big.Int, a_score *big.Int, b_score *big.Int) (*types.Transaction, error) {
	return _Cup.Contract.Announce(&_Cup.TransactOpts, gameId, a_score, b_score)
}

// Announce is a paid mutator transaction binding the contract method 0x7ea1a871.
//
// Solidity: function announce(uint256 gameId, uint256 a_score, uint256 b_score) returns()
func (_Cup *CupTransactorSession) Announce(gameId *big.Int, a_score *big.Int, b_score *big.Int) (*types.Transaction, error) {
	return _Cup.Contract.Announce(&_Cup.TransactOpts, gameId, a_score, b_score)
}

// Bet is a paid mutator transaction binding the contract method 0xe3eba7a5.
//
// Solidity: function bet(uint256 gameId, uint256 amount, uint8 t) returns()
func (_Cup *CupTransactor) Bet(opts *bind.TransactOpts, gameId *big.Int, amount *big.Int, t uint8) (*types.Transaction, error) {
	return _Cup.contract.Transact(opts, "bet", gameId, amount, t)
}

// Bet is a paid mutator transaction binding the contract method 0xe3eba7a5.
//
// Solidity: function bet(uint256 gameId, uint256 amount, uint8 t) returns()
func (_Cup *CupSession) Bet(gameId *big.Int, amount *big.Int, t uint8) (*types.Transaction, error) {
	return _Cup.Contract.Bet(&_Cup.TransactOpts, gameId, amount, t)
}

// Bet is a paid mutator transaction binding the contract method 0xe3eba7a5.
//
// Solidity: function bet(uint256 gameId, uint256 amount, uint8 t) returns()
func (_Cup *CupTransactorSession) Bet(gameId *big.Int, amount *big.Int, t uint8) (*types.Transaction, error) {
	return _Cup.Contract.Bet(&_Cup.TransactOpts, gameId, amount, t)
}

// CreateGame is a paid mutator transaction binding the contract method 0xc821644e.
//
// Solidity: function createGame(string a_team, string b_team, string a_team_logo, string b_team_logo, string label, uint64 bet_start_time, uint64 bet_end_time, uint64 game_start_time) returns(uint256)
func (_Cup *CupTransactor) CreateGame(opts *bind.TransactOpts, a_team string, b_team string, a_team_logo string, b_team_logo string, label string, bet_start_time uint64, bet_end_time uint64, game_start_time uint64) (*types.Transaction, error) {
	return _Cup.contract.Transact(opts, "createGame", a_team, b_team, a_team_logo, b_team_logo, label, bet_start_time, bet_end_time, game_start_time)
}

// CreateGame is a paid mutator transaction binding the contract method 0xc821644e.
//
// Solidity: function createGame(string a_team, string b_team, string a_team_logo, string b_team_logo, string label, uint64 bet_start_time, uint64 bet_end_time, uint64 game_start_time) returns(uint256)
func (_Cup *CupSession) CreateGame(a_team string, b_team string, a_team_logo string, b_team_logo string, label string, bet_start_time uint64, bet_end_time uint64, game_start_time uint64) (*types.Transaction, error) {
	return _Cup.Contract.CreateGame(&_Cup.TransactOpts, a_team, b_team, a_team_logo, b_team_logo, label, bet_start_time, bet_end_time, game_start_time)
}

// CreateGame is a paid mutator transaction binding the contract method 0xc821644e.
//
// Solidity: function createGame(string a_team, string b_team, string a_team_logo, string b_team_logo, string label, uint64 bet_start_time, uint64 bet_end_time, uint64 game_start_time) returns(uint256)
func (_Cup *CupTransactorSession) CreateGame(a_team string, b_team string, a_team_logo string, b_team_logo string, label string, bet_start_time uint64, bet_end_time uint64, game_start_time uint64) (*types.Transaction, error) {
	return _Cup.Contract.CreateGame(&_Cup.TransactOpts, a_team, b_team, a_team_logo, b_team_logo, label, bet_start_time, bet_end_time, game_start_time)
}

// PlatformWithdraw is a paid mutator transaction binding the contract method 0x69a7886b.
//
// Solidity: function platformWithdraw(uint256 gameId) returns()
func (_Cup *CupTransactor) PlatformWithdraw(opts *bind.TransactOpts, gameId *big.Int) (*types.Transaction, error) {
	return _Cup.contract.Transact(opts, "platformWithdraw", gameId)
}

// PlatformWithdraw is a paid mutator transaction binding the contract method 0x69a7886b.
//
// Solidity: function platformWithdraw(uint256 gameId) returns()
func (_Cup *CupSession) PlatformWithdraw(gameId *big.Int) (*types.Transaction, error) {
	return _Cup.Contract.PlatformWithdraw(&_Cup.TransactOpts, gameId)
}

// PlatformWithdraw is a paid mutator transaction binding the contract method 0x69a7886b.
//
// Solidity: function platformWithdraw(uint256 gameId) returns()
func (_Cup *CupTransactorSession) PlatformWithdraw(gameId *big.Int) (*types.Transaction, error) {
	return _Cup.Contract.PlatformWithdraw(&_Cup.TransactOpts, gameId)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Cup *CupTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Cup.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Cup *CupSession) RenounceOwnership() (*types.Transaction, error) {
	return _Cup.Contract.RenounceOwnership(&_Cup.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Cup *CupTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Cup.Contract.RenounceOwnership(&_Cup.TransactOpts)
}

// SetMinBetAmount is a paid mutator transaction binding the contract method 0x6c188593.
//
// Solidity: function setMinBetAmount(uint256 value) returns(bool)
func (_Cup *CupTransactor) SetMinBetAmount(opts *bind.TransactOpts, value *big.Int) (*types.Transaction, error) {
	return _Cup.contract.Transact(opts, "setMinBetAmount", value)
}

// SetMinBetAmount is a paid mutator transaction binding the contract method 0x6c188593.
//
// Solidity: function setMinBetAmount(uint256 value) returns(bool)
func (_Cup *CupSession) SetMinBetAmount(value *big.Int) (*types.Transaction, error) {
	return _Cup.Contract.SetMinBetAmount(&_Cup.TransactOpts, value)
}

// SetMinBetAmount is a paid mutator transaction binding the contract method 0x6c188593.
//
// Solidity: function setMinBetAmount(uint256 value) returns(bool)
func (_Cup *CupTransactorSession) SetMinBetAmount(value *big.Int) (*types.Transaction, error) {
	return _Cup.Contract.SetMinBetAmount(&_Cup.TransactOpts, value)
}

// SetSystemDividendRatio is a paid mutator transaction binding the contract method 0xa92b31ee.
//
// Solidity: function setSystemDividendRatio(uint256 value) returns(bool)
func (_Cup *CupTransactor) SetSystemDividendRatio(opts *bind.TransactOpts, value *big.Int) (*types.Transaction, error) {
	return _Cup.contract.Transact(opts, "setSystemDividendRatio", value)
}

// SetSystemDividendRatio is a paid mutator transaction binding the contract method 0xa92b31ee.
//
// Solidity: function setSystemDividendRatio(uint256 value) returns(bool)
func (_Cup *CupSession) SetSystemDividendRatio(value *big.Int) (*types.Transaction, error) {
	return _Cup.Contract.SetSystemDividendRatio(&_Cup.TransactOpts, value)
}

// SetSystemDividendRatio is a paid mutator transaction binding the contract method 0xa92b31ee.
//
// Solidity: function setSystemDividendRatio(uint256 value) returns(bool)
func (_Cup *CupTransactorSession) SetSystemDividendRatio(value *big.Int) (*types.Transaction, error) {
	return _Cup.Contract.SetSystemDividendRatio(&_Cup.TransactOpts, value)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Cup *CupTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Cup.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Cup *CupSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Cup.Contract.TransferOwnership(&_Cup.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Cup *CupTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Cup.Contract.TransferOwnership(&_Cup.TransactOpts, newOwner)
}

// UpdateGame is a paid mutator transaction binding the contract method 0x9b17c8fc.
//
// Solidity: function updateGame(uint256 gameId, string a_team, string b_team, string a_team_logo, string b_team_logo, string label, uint64 bet_start_time, uint64 bet_end_time, uint64 game_start_time) returns()
func (_Cup *CupTransactor) UpdateGame(opts *bind.TransactOpts, gameId *big.Int, a_team string, b_team string, a_team_logo string, b_team_logo string, label string, bet_start_time uint64, bet_end_time uint64, game_start_time uint64) (*types.Transaction, error) {
	return _Cup.contract.Transact(opts, "updateGame", gameId, a_team, b_team, a_team_logo, b_team_logo, label, bet_start_time, bet_end_time, game_start_time)
}

// UpdateGame is a paid mutator transaction binding the contract method 0x9b17c8fc.
//
// Solidity: function updateGame(uint256 gameId, string a_team, string b_team, string a_team_logo, string b_team_logo, string label, uint64 bet_start_time, uint64 bet_end_time, uint64 game_start_time) returns()
func (_Cup *CupSession) UpdateGame(gameId *big.Int, a_team string, b_team string, a_team_logo string, b_team_logo string, label string, bet_start_time uint64, bet_end_time uint64, game_start_time uint64) (*types.Transaction, error) {
	return _Cup.Contract.UpdateGame(&_Cup.TransactOpts, gameId, a_team, b_team, a_team_logo, b_team_logo, label, bet_start_time, bet_end_time, game_start_time)
}

// UpdateGame is a paid mutator transaction binding the contract method 0x9b17c8fc.
//
// Solidity: function updateGame(uint256 gameId, string a_team, string b_team, string a_team_logo, string b_team_logo, string label, uint64 bet_start_time, uint64 bet_end_time, uint64 game_start_time) returns()
func (_Cup *CupTransactorSession) UpdateGame(gameId *big.Int, a_team string, b_team string, a_team_logo string, b_team_logo string, label string, bet_start_time uint64, bet_end_time uint64, game_start_time uint64) (*types.Transaction, error) {
	return _Cup.Contract.UpdateGame(&_Cup.TransactOpts, gameId, a_team, b_team, a_team_logo, b_team_logo, label, bet_start_time, bet_end_time, game_start_time)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 gameId) returns()
func (_Cup *CupTransactor) Withdraw(opts *bind.TransactOpts, gameId *big.Int) (*types.Transaction, error) {
	return _Cup.contract.Transact(opts, "withdraw", gameId)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 gameId) returns()
func (_Cup *CupSession) Withdraw(gameId *big.Int) (*types.Transaction, error) {
	return _Cup.Contract.Withdraw(&_Cup.TransactOpts, gameId)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 gameId) returns()
func (_Cup *CupTransactorSession) Withdraw(gameId *big.Int) (*types.Transaction, error) {
	return _Cup.Contract.Withdraw(&_Cup.TransactOpts, gameId)
}

// CupOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Cup contract.
type CupOwnershipTransferredIterator struct {
	Event *CupOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CupOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CupOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CupOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CupOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CupOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CupOwnershipTransferred represents a OwnershipTransferred event raised by the Cup contract.
type CupOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Cup *CupFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*CupOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Cup.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &CupOwnershipTransferredIterator{contract: _Cup.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Cup *CupFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CupOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Cup.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CupOwnershipTransferred)
				if err := _Cup.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Cup *CupFilterer) ParseOwnershipTransferred(log types.Log) (*CupOwnershipTransferred, error) {
	event := new(CupOwnershipTransferred)
	if err := _Cup.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
